author: Ngo Dang Dong Khoi - Le Huynh Giang
reference link: https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/?tabs=dotnet-core-cli

In real world projects, data models change as features get implemented: 
new entities or properties are added and removed, and database schemas needs to be changed accordingly to be kept in sync with the application. 
The migrations feature in EF Core provides a way to incrementally update the database schema 
to keep it in sync with the application's data model while preserving existing data in the database.

During development, you may have used the Create and Drop APIs to iterate quickly, 
changing your model as needed; but now that your application is going to production, 
you need a way to safely evolve the schema without dropping the entire database.

CLI: ef core command-line interface
PMC: Package manager console

GETTING STARTED (11/01/2020)
	Create first migration
		CLI:
			dotnet ef migrations add <name of migration>
		PMC:
			Add-Migration <name of migration>

		Result => EF Core will create a directory called Migrations in your project, and generate some files.

	Create your database and schema
		CLI:
			dotnet ef database update
		PMC:
			Update-Database

		Result =>  your application is ready to run on your new database, and you didn't need to write a single line of SQL. 
			Note that this way of applying migrations is ideal for local development, but is less suitable for production environments - https://docs.microsoft.com/en-us/ef/core/managing-schemas/migrations/applying?tabs=dotnet-core-cli for more info.

	Evolving your model - using to add new column, change name, seeding data, etc.
		CLI:
			dotnet ef migrations add <name of migraion>
		PMC:
			Add-Migration <name of migraion>

	Remove a migration
		CLI:
			dotnet ef migrations remove
		PMC:
			Remove-Migration

	Listing migrations
		CLI:
			dotnet ef migrations list
	
		
			
			
